fullnameOverride: ""
replicaCount: 1

image:
  repository: test
  pullPolicy: IfNotPresent
  tag: ""

imagePullSecrets: []
nameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podLabels: {}
podAnnotations: {}
podSecurityContext: {}
securityContext: {}

maxUnavailable: 1

topologySpreadConstraints: []

services:
  - name: "example1"
    type: ClusterIP
    ports:
      port: 80
      targetPort: 1000
      protocol: TCP
      name: http

  - name: "example2"
    type: ClusterIP
    ports:
      port: 90
      targetPort: 9090
      protocol: TCP
      name: http

ingress:
  enabled: false
ingresses:
  {}
  # - className: "example1"
  #   backend:
  #     service:
  #       name: "example1"
  #       portName: "http"
  #   annotations: {}
  #   hosts:
  #     - host: chart-example1.local
  #       paths:
  #         - path: /
  #           pathType: ImplementationSpecific
  #   tls: []
  # - backend:
  #     service:
  #       name: "example1"
  #       portName: "http"
  #   className: "example2"
  #   annotations: {}
  #   hosts:
  #     - host: chart-example2.local
  #       paths:
  #         - path: /
  #           pathType: ImplementationSpecific
  #   tls: []

serviceMonitor:
  enabled: false
serviceMonitors: {}
#     - serviceName: "example1"
#       metricsPortName: "metrics"
#       metricsPath: "/metrics"
#       scrapeInterval: "15"
#     - serviceName: "example1"
#       metricsPortName: "metrics"
#       metricsPath: "/metrics"
#       scrapeInterval: "15"

autoscaling:
  enabled: false
  # minReplicas: 1
  # maxReplicas: 100
  # targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

keda:
  apiVersion: "keda.sh/v1alpha1"
  enabled: false
  minReplicas: 2
  maxReplicas: 5
  pollingInterval: 30
  cooldownPeriod: 300
  restoreToOriginalReplicaCount: false
  scaledObject:
    annotations: {}
  triggers: []
  # - type: prometheus
  #    metadata:
  #      serverAddress: http://<prometheus-host>:9090
  #      metricName: http_requests_total
  #      threshold: '100'
  #      query: sum(rate(http_requests_total{deployment="deployment"}[2m]))
  behavior:
    {}
    # scaleDown:
    # stabilizationWindowSeconds: 300
    # policies:
    # - type: Pods
    # value: 1
    # periodSeconds: 180
    # scaleUp:
    # stabilizationWindowSeconds: 300
    # policies:
    # - type: Pods
    # value: 2
    # periodSeconds: 60

nodeSelector: {}

tolerations: []

affinity: {}

env:
  {}
  # - name: NAME
  #   valueFrom:
  #     secretKeyRef:
  #       name: KEY_NAME
  #       key: SECRET_KEY
extraenv:
  {}
  # - name: NAME
  #   valueFrom:
  #     secretKeyRef:
  #       name: KEY_NAME
  #       key: SECRET_KEY
prometheusRule:
  enabled: false
  # rules:
  # - alert: HighRequestLatency
  #   expr: job:request_latency_seconds:mean5m{job="myjob"} > 0.5
  #   for: 10m
  #   labels:
  #     severity: page
  #   annotations:
  #     summary: High request latency

revisionHistoryLimit: 3
minReadySeconds: 30
terminationGracePeriodSeconds: 60
livenessProbe: {}
readinessProbe: {}
startupProbe: {}
volumeMounts: []

volumeClaimTemplates:
  enabled: false
  accessModes: ReadWriteOnce
  storage: 10Gi
  storageClassName: gp3
  volumeMode: Filesystem